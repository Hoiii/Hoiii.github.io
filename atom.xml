<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>EDEN</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Hoiii.github.io./"/>
  <updated>2018-02-12T06:11:45.206Z</updated>
  <id>http://Hoiii.github.io./</id>
  
  <author>
    <name>Hoi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>動態規劃（杭電OJ1003）</title>
    <link href="http://Hoiii.github.io./2018/02/11/%E5%8B%95%E6%85%8B%E8%A6%8F%E5%8A%83%EF%BC%88%E6%9D%AD%E9%9B%BBOJ1003%EF%BC%89/"/>
    <id>http://Hoiii.github.io./2018/02/11/動態規劃（杭電OJ1003）/</id>
    <published>2018-02-11T15:01:27.000Z</published>
    <updated>2018-02-12T06:11:45.206Z</updated>
    
    <content type="html"><![CDATA[<p>先上代碼，有時間再寫分析。<br>這裡用的C++:<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, a[<span class="number">100001</span>], i, cont = <span class="number">0</span>;<span class="comment">//T:表示T組用例；n:表示該用例含n個數；cont：用於標識Case數</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> thisMax = <span class="number">0</span>, maxSum = a[<span class="number">0</span>], temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            thisMax = a[i] + thisMax;</span><br><span class="line">            <span class="keyword">if</span>(thisMax &gt; maxSum)&#123;</span><br><span class="line">                maxSum = thisMax;</span><br><span class="line">                start = temp;</span><br><span class="line">                end = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(thisMax &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                thisMax = <span class="number">0</span>;</span><br><span class="line">                temp = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case "</span>&lt;&lt;++cont&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;maxSum&lt;&lt;<span class="string">" "</span>&lt;&lt;start+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;end+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(T)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>题目要求求出最大子序列总和。<br>maxSum表示最大总和，thisMax表示当前已增加的元素和，令maxSum初值取a[0]（注意如果取0的话，当所有元素都为负数时maxSum就会一直取0，显然会出错。），往后每一次循环都用thisMax加上a[i]，再用maxSum与thisMax比较大小，如果大于maxSum则把最大和置为thisMax的值。<br>。。未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先上代碼，有時間再寫分析。&lt;br&gt;這裡用的C++:&lt;br&gt;
    
    </summary>
    
      <category term="OJ" scheme="http://Hoiii.github.io./categories/OJ/"/>
    
    
      <category term="OJ" scheme="http://Hoiii.github.io./tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>Parallels Desktop安装虚拟机</title>
    <link href="http://Hoiii.github.io./2018/02/11/Parallels-Desktop%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>http://Hoiii.github.io./2018/02/11/Parallels-Desktop安装虚拟机/</id>
    <published>2018-02-10T18:05:28.000Z</published>
    <updated>2018-02-10T18:12:23.204Z</updated>
    
    <content type="html"><![CDATA[<p>安装Parallels Desktop 13免激活版：<br>    <a href="https://www.xp510.com/xiazai/ossoft/mactools/24960.html" target="_blank" rel="noopener">https://www.xp510.com/xiazai/ossoft/mactools/24960.html</a><br>    （亲测可用）<br>下载Windows镜像：<br>    <a href="http://msdn.itellyou.cn" target="_blank" rel="noopener">http://msdn.itellyou.cn</a><br>    进MSDN，左边栏选操作系统，选你自己喜欢的版本就好。<br><a id="more"></a><br>下载好后，打开PD 新建虚拟机，选择通过镜像安装，按提示一步一步来就好，注意安装过程中Windows展开可能会在0%处停留数分钟到十数分钟，等着就好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装Parallels Desktop 13免激活版：&lt;br&gt;    &lt;a href=&quot;https://www.xp510.com/xiazai/ossoft/mactools/24960.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.xp510.com/xiazai/ossoft/mactools/24960.html&lt;/a&gt;&lt;br&gt;    （亲测可用）&lt;br&gt;下载Windows镜像：&lt;br&gt;    &lt;a href=&quot;http://msdn.itellyou.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://msdn.itellyou.cn&lt;/a&gt;&lt;br&gt;    进MSDN，左边栏选操作系统，选你自己喜欢的版本就好。&lt;br&gt;
    
    </summary>
    
      <category term="Others" scheme="http://Hoiii.github.io./categories/Others/"/>
    
    
      <category term="虚拟机" scheme="http://Hoiii.github.io./tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>macOS下配置OpenCV3和Python2.7</title>
    <link href="http://Hoiii.github.io./2018/02/09/macOS%E4%B8%8B%E9%85%8D%E7%BD%AEOpenCV3%E5%92%8CPython2-7/"/>
    <id>http://Hoiii.github.io./2018/02/09/macOS下配置OpenCV3和Python2-7/</id>
    <published>2018-02-09T11:20:20.000Z</published>
    <updated>2018-02-10T07:26:15.818Z</updated>
    
    <content type="html"><![CDATA[<p>#Step 1:</p><pre><code>安装Xcode，这个不解释，自行移步App Store下载安装。（command line tool也必须安装。）</code></pre><p>#Step 2:</p><pre><code>安装Homebrew。打开终端：$ cd$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;$ brew update</code></pre><a id="more"></a><p>#Step 3:</p><pre><code>1.安装python2.7。 实际上，macOS里是自带Python2.7的，然而它的路径是/usr/bin/python。为了方便往后我们的库和包使用，我们不用系统自带的Python。 打开终端: $ brew install python2.设置路径。为在任何系统库和包前使用Homebrew包，需要设置路径文件。    1.打开~/.bash_profile文件（用编辑器打开），若没有，创建一个     $ cd ~     $ touch. bash_profile     $ open -e .bash_profile    2.在第一行加入如下代码。    export PATH=/usr/local/bin:$PATH    3. 重新加载文件。    $ source ~/.bash_profile    4. 在终端运行命令检查是否已更改路径。    $ cd ~    $ which python    如果输出为/usr/bin/python则说明没有更改成功。请返回检查哪里出了问题。    PS:如果在安装Python时终端有提示路径的话，使用终端的就好，例如我的就是：    export PATH=&quot;/usr/local/opt/python/libexec/bin:$PATH&quot;</code></pre><p>#Step 4:</p><pre><code>安装OpenCV 3。两个方法，Homebrew安装或者从github下拉再手动编译。为便捷考虑，我采用Homebrew安装。$ cd ~$ brew tap homebrew/science$ brew info opencv$ brew install opencv</code></pre><p>#Step 5:</p><pre><code>查看环境变量是否加入（版本注意更改为你的版本，我这里是3.4.0_1）cd /usr/local/Cellar/opencv/3.4.0_1cat ~/.bash_profile | grep PYTHONPATH与Python链接cd /usr/local/lib/python2.7/site-packagesln -s /usr/local/Cellar/opencv/2.4.12_2/lib/python2.7/site-packages/cv.py cv.pyln -s /usr/local/Cellar/opencv/2.4.12_2/lib/python2.7/site-packages/cv2.so cv2.soPS:注意这里的目录是你自己的Python2.7的site-packages。也就是你想之后使用的那一个Python。</code></pre><p>#Step 6:<br>    测试。<br>    自行找一张图，命名为：jurassic_world.jpg<br>    创建一个新的.py文件，命名为test_akaze.py，插入以下代码：</p><pre><code># import the necessary packagesfrom __future__ import print_functionimport cv2# load the image and convert it to grayscaleimage = cv2.imread(&quot;jurassic_world.jpg&quot;)gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)cv2.imshow(&quot;Original&quot;, image)# initialize the AKAZE descriptor, then detect keypoints and extract# local invariant descriptors from the imagedetector = cv2.AKAZE_create()(kps, descs) = detector.detectAndCompute(gray, None)print(&quot;keypoints: {}, descriptors: {}&quot;.format(len(kps), descs.shape))# draw the keypoints and show the output imagecv2.drawKeypoints(image, kps, image, (0, 255, 0))cv2.imshow(&quot;Output&quot;, image)cv2.waitKey(0)把这个.py文件和图片放到同一个目录，终端进入该文件夹位置。$ python test_akaze.py如果没有意外，你会得到这张图片的AKAZE特征输出。</code></pre><p>#Step 7:</p><pre><code>在PyCharm中调用。1.新建一个project。2.进入 preferences -&gt; Project:untitled -&gt; Project Interpreter设置你与OpenCV绑定的Python解释器版本。3.在项目里新增.py文件，内容同Step 6；把图片拖入项目里。4.RUN如无意外，将会得到与Step 6一样的输出。至此你的OpenCV就配置好了。</code></pre><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Step 1:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;安装Xcode，这个不解释，自行移步App Store下载安装。（command line tool也必须安装。）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;#Step 2:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;安装Homebrew。
打开终端：

$ cd
$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
$ brew update
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="OpenCV" scheme="http://Hoiii.github.io./categories/OpenCV/"/>
    
    
      <category term="OpenCV" scheme="http://Hoiii.github.io./tags/OpenCV/"/>
    
  </entry>
  
</feed>
