{"meta":{"title":"EDEN","subtitle":null,"description":"PULL THE TRIGGER","author":"Hoi","url":"http://Hoiii.github.io."},"pages":[{"title":"","date":"2018-02-10T06:44:53.726Z","updated":"2018-02-09T19:26:49.066Z","comments":true,"path":"about/index.html","permalink":"http://Hoiii.github.io./about/index.html","excerpt":"","text":"About Author隨便寫點東西，看官請隨意。"},{"title":"categories","date":"2018-02-10T06:48:58.000Z","updated":"2018-02-10T06:49:53.281Z","comments":true,"path":"categories/index.html","permalink":"http://Hoiii.github.io./categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-02-10T06:48:41.000Z","updated":"2018-02-10T07:26:27.959Z","comments":true,"path":"tags/index.html","permalink":"http://Hoiii.github.io./tags/index.html","excerpt":"","text":""}],"posts":[{"title":"動態規劃（杭電OJ1003）","slug":"動態規劃（杭電OJ1003）","date":"2018-02-11T15:01:27.000Z","updated":"2018-02-11T15:06:39.523Z","comments":true,"path":"2018/02/11/動態規劃（杭電OJ1003）/","link":"","permalink":"http://Hoiii.github.io./2018/02/11/動態規劃（杭電OJ1003）/","excerpt":"","text":"先上代碼，有時間再寫分析。這裡用的C++:123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;using namespace std;int main()&#123; int T, n, a[100001], i, cont = 0; //T:表示T組用例；n:表示該用例含n個數；cont：用於標識Case數 cin&gt;&gt;T; while(T--)&#123; cin&gt;&gt;n; int start = 0; int end = 0; for(i = 0; i &lt; n; i++)&#123; cin&gt;&gt;a[i]; &#125; int thisMax = 0, maxSum = a[0], temp = 0; for(i = 0; i &lt; n; i++)&#123; thisMax = a[i] + thisMax; if(thisMax &gt; maxSum)&#123; maxSum = thisMax; start = temp; end = i; &#125; if(thisMax &lt; 0)&#123; thisMax = 0; temp = i + 1; &#125; &#125; cout&lt;&lt;\"Case \"&lt;&lt;++cont&lt;&lt;\":\"&lt;&lt;endl; cout&lt;&lt;maxSum&lt;&lt;\" \"&lt;&lt;start+1&lt;&lt;\" \"&lt;&lt;end+1&lt;&lt;endl; if(T) cout&lt;&lt;endl; &#125; return 0;&#125;","categories":[{"name":"OJ","slug":"OJ","permalink":"http://Hoiii.github.io./categories/OJ/"}],"tags":[{"name":"OJ","slug":"OJ","permalink":"http://Hoiii.github.io./tags/OJ/"}]},{"title":"Parallels Desktop安装虚拟机","slug":"Parallels-Desktop安装虚拟机","date":"2018-02-10T18:05:28.000Z","updated":"2018-02-10T18:12:23.204Z","comments":true,"path":"2018/02/11/Parallels-Desktop安装虚拟机/","link":"","permalink":"http://Hoiii.github.io./2018/02/11/Parallels-Desktop安装虚拟机/","excerpt":"安装Parallels Desktop 13免激活版： https://www.xp510.com/xiazai/ossoft/mactools/24960.html （亲测可用）下载Windows镜像： http://msdn.itellyou.cn 进MSDN，左边栏选操作系统，选你自己喜欢的版本就好。","text":"安装Parallels Desktop 13免激活版： https://www.xp510.com/xiazai/ossoft/mactools/24960.html （亲测可用）下载Windows镜像： http://msdn.itellyou.cn 进MSDN，左边栏选操作系统，选你自己喜欢的版本就好。下载好后，打开PD 新建虚拟机，选择通过镜像安装，按提示一步一步来就好，注意安装过程中Windows展开可能会在0%处停留数分钟到十数分钟，等着就好。","categories":[{"name":"Others","slug":"Others","permalink":"http://Hoiii.github.io./categories/Others/"}],"tags":[{"name":"虚拟机","slug":"虚拟机","permalink":"http://Hoiii.github.io./tags/虚拟机/"}]},{"title":"macOS下配置OpenCV3和Python2.7","slug":"macOS下配置OpenCV3和Python2-7","date":"2018-02-09T11:20:20.000Z","updated":"2018-02-10T07:26:15.818Z","comments":true,"path":"2018/02/09/macOS下配置OpenCV3和Python2-7/","link":"","permalink":"http://Hoiii.github.io./2018/02/09/macOS下配置OpenCV3和Python2-7/","excerpt":"#Step 1: 安装Xcode，这个不解释，自行移步App Store下载安装。（command line tool也必须安装。） #Step 2: 安装Homebrew。 打开终端： $ cd $ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; $ brew update","text":"#Step 1: 安装Xcode，这个不解释，自行移步App Store下载安装。（command line tool也必须安装。） #Step 2: 安装Homebrew。 打开终端： $ cd $ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; $ brew update #Step 3: 1.安装python2.7。 实际上，macOS里是自带Python2.7的，然而它的路径是/usr/bin/python。为了方便往后我们的库和包使用，我们不用系统自带的Python。 打开终端: $ brew install python 2.设置路径。 为在任何系统库和包前使用Homebrew包，需要设置路径文件。 1.打开~/.bash_profile文件（用编辑器打开），若没有，创建一个 $ cd ~ $ touch. bash_profile $ open -e .bash_profile 2.在第一行加入如下代码。 export PATH=/usr/local/bin:$PATH 3. 重新加载文件。 $ source ~/.bash_profile 4. 在终端运行命令检查是否已更改路径。 $ cd ~ $ which python 如果输出为/usr/bin/python则说明没有更改成功。请返回检查哪里出了问题。 PS:如果在安装Python时终端有提示路径的话，使用终端的就好，例如我的就是： export PATH=&quot;/usr/local/opt/python/libexec/bin:$PATH&quot; #Step 4: 安装OpenCV 3。 两个方法，Homebrew安装或者从github下拉再手动编译。为便捷考虑，我采用Homebrew安装。 $ cd ~ $ brew tap homebrew/science $ brew info opencv $ brew install opencv #Step 5: 查看环境变量是否加入（版本注意更改为你的版本，我这里是3.4.0_1） cd /usr/local/Cellar/opencv/3.4.0_1 cat ~/.bash_profile | grep PYTHONPATH 与Python链接 cd /usr/local/lib/python2.7/site-packages ln -s /usr/local/Cellar/opencv/2.4.12_2/lib/python2.7/site-packages/cv.py cv.py ln -s /usr/local/Cellar/opencv/2.4.12_2/lib/python2.7/site-packages/cv2.so cv2.so PS:注意这里的目录是你自己的Python2.7的site-packages。也就是你想之后使用的那一个Python。 #Step 6: 测试。 自行找一张图，命名为：jurassic_world.jpg 创建一个新的.py文件，命名为test_akaze.py，插入以下代码： # import the necessary packages from __future__ import print_function import cv2 # load the image and convert it to grayscale image = cv2.imread(&quot;jurassic_world.jpg&quot;) gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) cv2.imshow(&quot;Original&quot;, image) # initialize the AKAZE descriptor, then detect keypoints and extract # local invariant descriptors from the image detector = cv2.AKAZE_create() (kps, descs) = detector.detectAndCompute(gray, None) print(&quot;keypoints: {}, descriptors: {}&quot;.format(len(kps), descs.shape)) # draw the keypoints and show the output image cv2.drawKeypoints(image, kps, image, (0, 255, 0)) cv2.imshow(&quot;Output&quot;, image) cv2.waitKey(0) 把这个.py文件和图片放到同一个目录，终端进入该文件夹位置。 $ python test_akaze.py 如果没有意外，你会得到这张图片的AKAZE特征输出。 #Step 7: 在PyCharm中调用。 1.新建一个project。 2.进入 preferences -&gt; Project:untitled -&gt; Project Interpreter 设置你与OpenCV绑定的Python解释器版本。 3.在项目里新增.py文件，内容同Step 6；把图片拖入项目里。 4.RUN 如无意外，将会得到与Step 6一样的输出。至此你的OpenCV就配置好了。 以上。","categories":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://Hoiii.github.io./categories/OpenCV/"}],"tags":[{"name":"OpenCV","slug":"OpenCV","permalink":"http://Hoiii.github.io./tags/OpenCV/"}]}]}